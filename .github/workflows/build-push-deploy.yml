name: Build and push Docker image to ECR
on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '**.md'
      - '**.yml'

jobs:
  build-and-push-image:
    name: Build and push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker/
          # check if we are able to push to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

# deploy to eks if build and push went ok.
  # deploy:
  #   name: Deploy to EKS
  #   needs: build-and-push-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #     - name: Set up kubectl
  #       uses: aws-actions/configure-kubectl@v1
  #       with:
  #         cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}
  #         # If you are creating a new IAM policy, you can attach the AmazonEKSClusterPolicy policy to your role.
  #         # If you are using an existing IAM policy, you can attach the AmazonEKSServicePolicy policy to your role.
  #         # https://docs.aws.amazon.com/eks/latest/userguide/getting-started-console.html
  #         # https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html
  #         role-name: ${{ secrets.EKS_ROLE_NAME }}
  #     - name: Set up Helm
  #       uses: azure/setup-helm@v1
  #       with:
  #         version: v3.5.2
  #     - name: Deploy to EKS
  #       run: |
  #         # Update the deployment with the new image
  #         kubectl set image deployment/${{ secrets.EKS_DEPLOYMENT_NAME }} ${{ secrets.EKS_CONTAINER_NAME }}=${{ needs.build-and-push-image.outputs.image }}
  #         # Wait for the rollout to complete
  #         kubectl rollout status deployment/${{ secrets.EKS_DEPLOYMENT_NAME }}
