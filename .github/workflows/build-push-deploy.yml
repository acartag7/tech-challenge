---
name: Build and push Docker image to ECR
on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '**.md'
      - '**.yml'

jobs:
  build-and-push-image:
    name: Build and push Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          # aws ecr get-login-password --region us-east-1 | \
          # docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG docker/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # deploy to eks if build and push went ok, use helm to deploy

  deploy:
    name: Deploy to EKS
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to EKS
        run: |
          aws eks --region us-east-1 update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}
          kubectl get po -A
                #helm upgrade --install --wait --timeout 10m0s --namespace default --create-namespace --set image.repository=${{ secrets.ECR_REPOSITORY }} --set image.tag=${{ github.sha }} --set image.pullPolicy=Always --set ingress.hosts[0]=${{ secrets.INGRESS_HOST }} --set ingress.tls[0].hosts[0]=${{ secrets.INGRESS_HOST }} --set ingress.tls[0].secretName=${{ secrets.INGRESS_SECRET_NAME }} --set ingress.tls[0].secretKey=${{ secrets.INGRESS_SECRET_KEY }} --set ingress.tls[0].secretCert=${{ secrets.INGRESS_SECRET_CERT }} --set ingress.tls[0].secretChain=${{ secrets.INGRESS_SECRET_CHAIN }} --set ingress.tls[0].secretFullChain=${{ secrets.INGRESS_SECRET_FULL_CHAIN }} --set ingress.tls[0].secretRoot=${{ secrets.INGRESS_SECRET_ROOT }} --set ingress.tls[0].secretBundle=${{ secrets.INGRESS_SECRET_BUNDLE }} --set ingress.tls[0].secretCa=${{ secrets.INGRESS_SECRET_CA }} --set ingress.tls[0].secretCaBundle=${{ secrets.INGRESS_SECRET_CA_BUNDLE }} --set ingress.tls[0].secretCaCrt=${{ secrets.INGRESS_SECRET_CA_CRT }} --set ingress
